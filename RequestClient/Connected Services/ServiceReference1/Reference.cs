//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Brigade", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class Brigade : object
    {
        
        private long IdBrigadeField;
        
        private string NameField;
        
        private ServiceReference1.RequestTable[] RequestTableField;
        
        private ServiceReference1.Worker[] WorkerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdBrigade
        {
            get
            {
                return this.IdBrigadeField;
            }
            set
            {
                this.IdBrigadeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTable[] RequestTable
        {
            get
            {
                return this.RequestTableField;
            }
            set
            {
                this.RequestTableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.Worker[] Worker
        {
            get
            {
                return this.WorkerField;
            }
            set
            {
                this.WorkerField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestTable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class RequestTable : object
    {
        
        private long AccountBalanceField;
        
        private string ApartmentField;
        
        private string CommentForRequestField;
        
        private string CommentMechanicField;
        
        private System.Nullable<long> CountTvField;
        
        private System.Nullable<System.DateTime> DateCreateField;
        
        private System.Nullable<System.DateTime> DateOfCompletionField;
        
        private string FioClientField;
        
        private string HouseField;
        
        private System.Nullable<long> IdBrigadeField;
        
        private ServiceReference1.Brigade IdBrigadeNavigationField;
        
        private System.Nullable<long> IdManagerField;
        
        private ServiceReference1.ManagerTable IdManagerNavigationField;
        
        private int IdRequestField;
        
        private long IdRequestStateField;
        
        private ServiceReference1.RequestStateTable IdRequestStateNavigationField;
        
        private long IdRequestTypeField;
        
        private ServiceReference1.RequestTypeTable IdRequestTypeNavigationField;
        
        private System.Nullable<int> IdStreetField;
        
        private ServiceReference1.StreetTable IdStreetNavigationField;
        
        private System.Nullable<long> IdSystemAdministratorField;
        
        private ServiceReference1.SystemAdministratorTable IdSystemAdministratorNavigationField;
        
        private string PhoneNumberField;
        
        private string PingField;
        
        private string PortField;
        
        private string ReviewField;
        
        private string SpeedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccountBalance
        {
            get
            {
                return this.AccountBalanceField;
            }
            set
            {
                this.AccountBalanceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Apartment
        {
            get
            {
                return this.ApartmentField;
            }
            set
            {
                this.ApartmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommentForRequest
        {
            get
            {
                return this.CommentForRequestField;
            }
            set
            {
                this.CommentForRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommentMechanic
        {
            get
            {
                return this.CommentMechanicField;
            }
            set
            {
                this.CommentMechanicField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> CountTv
        {
            get
            {
                return this.CountTvField;
            }
            set
            {
                this.CountTvField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateCreate
        {
            get
            {
                return this.DateCreateField;
            }
            set
            {
                this.DateCreateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateOfCompletion
        {
            get
            {
                return this.DateOfCompletionField;
            }
            set
            {
                this.DateOfCompletionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FioClient
        {
            get
            {
                return this.FioClientField;
            }
            set
            {
                this.FioClientField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string House
        {
            get
            {
                return this.HouseField;
            }
            set
            {
                this.HouseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> IdBrigade
        {
            get
            {
                return this.IdBrigadeField;
            }
            set
            {
                this.IdBrigadeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.Brigade IdBrigadeNavigation
        {
            get
            {
                return this.IdBrigadeNavigationField;
            }
            set
            {
                this.IdBrigadeNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> IdManager
        {
            get
            {
                return this.IdManagerField;
            }
            set
            {
                this.IdManagerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.ManagerTable IdManagerNavigation
        {
            get
            {
                return this.IdManagerNavigationField;
            }
            set
            {
                this.IdManagerNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdRequest
        {
            get
            {
                return this.IdRequestField;
            }
            set
            {
                this.IdRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdRequestState
        {
            get
            {
                return this.IdRequestStateField;
            }
            set
            {
                this.IdRequestStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestStateTable IdRequestStateNavigation
        {
            get
            {
                return this.IdRequestStateNavigationField;
            }
            set
            {
                this.IdRequestStateNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdRequestType
        {
            get
            {
                return this.IdRequestTypeField;
            }
            set
            {
                this.IdRequestTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTypeTable IdRequestTypeNavigation
        {
            get
            {
                return this.IdRequestTypeNavigationField;
            }
            set
            {
                this.IdRequestTypeNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IdStreet
        {
            get
            {
                return this.IdStreetField;
            }
            set
            {
                this.IdStreetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.StreetTable IdStreetNavigation
        {
            get
            {
                return this.IdStreetNavigationField;
            }
            set
            {
                this.IdStreetNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> IdSystemAdministrator
        {
            get
            {
                return this.IdSystemAdministratorField;
            }
            set
            {
                this.IdSystemAdministratorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.SystemAdministratorTable IdSystemAdministratorNavigation
        {
            get
            {
                return this.IdSystemAdministratorNavigationField;
            }
            set
            {
                this.IdSystemAdministratorNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber
        {
            get
            {
                return this.PhoneNumberField;
            }
            set
            {
                this.PhoneNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ping
        {
            get
            {
                return this.PingField;
            }
            set
            {
                this.PingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Port
        {
            get
            {
                return this.PortField;
            }
            set
            {
                this.PortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Review
        {
            get
            {
                return this.ReviewField;
            }
            set
            {
                this.ReviewField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Speed
        {
            get
            {
                return this.SpeedField;
            }
            set
            {
                this.SpeedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Worker", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class Worker : object
    {
        
        private System.Nullable<long> IdBrigadeField;
        
        private ServiceReference1.Brigade IdBrigadeNavigationField;
        
        private long IdWorkerField;
        
        private string LoginField;
        
        private string NameField;
        
        private string PasswordField;
        
        private float PercentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> IdBrigade
        {
            get
            {
                return this.IdBrigadeField;
            }
            set
            {
                this.IdBrigadeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.Brigade IdBrigadeNavigation
        {
            get
            {
                return this.IdBrigadeNavigationField;
            }
            set
            {
                this.IdBrigadeNavigationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdWorker
        {
            get
            {
                return this.IdWorkerField;
            }
            set
            {
                this.IdWorkerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login
        {
            get
            {
                return this.LoginField;
            }
            set
            {
                this.LoginField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Percent
        {
            get
            {
                return this.PercentField;
            }
            set
            {
                this.PercentField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerTable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class ManagerTable : object
    {
        
        private long IdManagerField;
        
        private string NameField;
        
        private System.Nullable<float> PercentField;
        
        private ServiceReference1.RequestTable[] RequestTableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdManager
        {
            get
            {
                return this.IdManagerField;
            }
            set
            {
                this.IdManagerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> Percent
        {
            get
            {
                return this.PercentField;
            }
            set
            {
                this.PercentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTable[] RequestTable
        {
            get
            {
                return this.RequestTableField;
            }
            set
            {
                this.RequestTableField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestStateTable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class RequestStateTable : object
    {
        
        private long IdRequestStateField;
        
        private ServiceReference1.RequestTable[] RequestTableField;
        
        private string StateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdRequestState
        {
            get
            {
                return this.IdRequestStateField;
            }
            set
            {
                this.IdRequestStateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTable[] RequestTable
        {
            get
            {
                return this.RequestTableField;
            }
            set
            {
                this.RequestTableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestTypeTable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class RequestTypeTable : object
    {
        
        private long IdRequestTypeField;
        
        private decimal PriceField;
        
        private ServiceReference1.RequestTable[] RequestTableField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdRequestType
        {
            get
            {
                return this.IdRequestTypeField;
            }
            set
            {
                this.IdRequestTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price
        {
            get
            {
                return this.PriceField;
            }
            set
            {
                this.PriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTable[] RequestTable
        {
            get
            {
                return this.RequestTableField;
            }
            set
            {
                this.RequestTableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StreetTable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class StreetTable : object
    {
        
        private int IdStreetField;
        
        private ServiceReference1.RequestTable[] RequestTableField;
        
        private string StreetField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdStreet
        {
            get
            {
                return this.IdStreetField;
            }
            set
            {
                this.IdStreetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTable[] RequestTable
        {
            get
            {
                return this.RequestTableField;
            }
            set
            {
                this.RequestTableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street
        {
            get
            {
                return this.StreetField;
            }
            set
            {
                this.StreetField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemAdministratorTable", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class SystemAdministratorTable : object
    {
        
        private long IdSystemAdministratorField;
        
        private string NameField;
        
        private ServiceReference1.RequestTable[] RequestTableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdSystemAdministrator
        {
            get
            {
                return this.IdSystemAdministratorField;
            }
            set
            {
                this.IdSystemAdministratorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference1.RequestTable[] RequestTable
        {
            get
            {
                return this.RequestTableField;
            }
            set
            {
                this.RequestTableField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountByDay", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class CountByDay : object
    {
        
        private int CountField;
        
        private int DayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count
        {
            get
            {
                return this.CountField;
            }
            set
            {
                this.CountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Day
        {
            get
            {
                return this.DayField;
            }
            set
            {
                this.DayField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Request", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class Request : object
    {
        
        private long AccountBalanceField;
        
        private string ApartmentField;
        
        private string CommentForRequestField;
        
        private string FIOField;
        
        private string HouseField;
        
        private int IDField;
        
        private string PhoneNumberField;
        
        private string StateField;
        
        private string StreetField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AccountBalance
        {
            get
            {
                return this.AccountBalanceField;
            }
            set
            {
                this.AccountBalanceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Apartment
        {
            get
            {
                return this.ApartmentField;
            }
            set
            {
                this.ApartmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommentForRequest
        {
            get
            {
                return this.CommentForRequestField;
            }
            set
            {
                this.CommentForRequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO
        {
            get
            {
                return this.FIOField;
            }
            set
            {
                this.FIOField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string House
        {
            get
            {
                return this.HouseField;
            }
            set
            {
                this.HouseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber
        {
            get
            {
                return this.PhoneNumberField;
            }
            set
            {
                this.PhoneNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street
        {
            get
            {
                return this.StreetField;
            }
            set
            {
                this.StreetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkerReport", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class WorkerReport : object
    {
        
        private long IdWorkerField;
        
        private string NameField;
        
        private float PercentField;
        
        private double SumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdWorker
        {
            get
            {
                return this.IdWorkerField;
            }
            set
            {
                this.IdWorkerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Percent
        {
            get
            {
                return this.PercentField;
            }
            set
            {
                this.PercentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Sum
        {
            get
            {
                return this.SumField;
            }
            set
            {
                this.SumField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerReport", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibraryRequest")]
    public partial class ManagerReport : object
    {
        
        private long IdManagerField;
        
        private string NameField;
        
        private float PercentField;
        
        private double SumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IdManager
        {
            get
            {
                return this.IdManagerField;
            }
            set
            {
                this.IdManagerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Percent
        {
            get
            {
                return this.PercentField;
            }
            set
            {
                this.PercentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Sum
        {
            get
            {
                return this.SumField;
            }
            set
            {
                this.SumField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBrigadeCRUD")]
    public interface IBrigadeCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrigadeCRUD/ReadBrigadeTable", ReplyAction="http://tempuri.org/IBrigadeCRUD/ReadBrigadeTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Brigade[]> ReadBrigadeTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrigadeCRUD/CreateBrigadeTable", ReplyAction="http://tempuri.org/IBrigadeCRUD/CreateBrigadeTableResponse")]
        System.Threading.Tasks.Task CreateBrigadeTableAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrigadeCRUD/UpdateBrigadeTable", ReplyAction="http://tempuri.org/IBrigadeCRUD/UpdateBrigadeTableResponse")]
        System.Threading.Tasks.Task UpdateBrigadeTableAsync(string name, long index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrigadeCRUD/DeleteBrigadeTable", ReplyAction="http://tempuri.org/IBrigadeCRUD/DeleteBrigadeTableResponse")]
        System.Threading.Tasks.Task DeleteBrigadeTableAsync(long index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IBrigadeCRUDChannel : ServiceReference1.IBrigadeCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class BrigadeCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IBrigadeCRUD>, ServiceReference1.IBrigadeCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BrigadeCRUDClient() : 
                base(BrigadeCRUDClient.GetDefaultBinding(), BrigadeCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBrigadeCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrigadeCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(BrigadeCRUDClient.GetBindingForEndpoint(endpointConfiguration), BrigadeCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrigadeCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BrigadeCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrigadeCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BrigadeCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BrigadeCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Brigade[]> ReadBrigadeTableAsync()
        {
            return base.Channel.ReadBrigadeTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateBrigadeTableAsync(string name)
        {
            return base.Channel.CreateBrigadeTableAsync(name);
        }
        
        public System.Threading.Tasks.Task UpdateBrigadeTableAsync(string name, long index)
        {
            return base.Channel.UpdateBrigadeTableAsync(name, index);
        }
        
        public System.Threading.Tasks.Task DeleteBrigadeTableAsync(long index)
        {
            return base.Channel.DeleteBrigadeTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBrigadeCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBrigadeCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BrigadeCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBrigadeCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BrigadeCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBrigadeCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBrigadeCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IManagerTableCRUD")]
    public interface IManagerTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerTableCRUD/ReadManagerTable", ReplyAction="http://tempuri.org/IManagerTableCRUD/ReadManagerTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.ManagerTable[]> ReadManagerTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerTableCRUD/CreateManagerTable", ReplyAction="http://tempuri.org/IManagerTableCRUD/CreateManagerTableResponse")]
        System.Threading.Tasks.Task CreateManagerTableAsync(string name, float percent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerTableCRUD/UpdateManagerTable", ReplyAction="http://tempuri.org/IManagerTableCRUD/UpdateManagerTableResponse")]
        System.Threading.Tasks.Task UpdateManagerTableAsync(string name, float percent, long index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerTableCRUD/DeleteManagerTable", ReplyAction="http://tempuri.org/IManagerTableCRUD/DeleteManagerTableResponse")]
        System.Threading.Tasks.Task DeleteManagerTableAsync(long index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IManagerTableCRUDChannel : ServiceReference1.IManagerTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ManagerTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IManagerTableCRUD>, ServiceReference1.IManagerTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ManagerTableCRUDClient() : 
                base(ManagerTableCRUDClient.GetDefaultBinding(), ManagerTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IManagerTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManagerTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(ManagerTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), ManagerTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManagerTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ManagerTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManagerTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ManagerTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ManagerTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ManagerTable[]> ReadManagerTableAsync()
        {
            return base.Channel.ReadManagerTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateManagerTableAsync(string name, float percent)
        {
            return base.Channel.CreateManagerTableAsync(name, percent);
        }
        
        public System.Threading.Tasks.Task UpdateManagerTableAsync(string name, float percent, long index)
        {
            return base.Channel.UpdateManagerTableAsync(name, percent, index);
        }
        
        public System.Threading.Tasks.Task DeleteManagerTableAsync(long index)
        {
            return base.Channel.DeleteManagerTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IManagerTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IManagerTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ManagerTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IManagerTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ManagerTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IManagerTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IManagerTableCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRequestStateTableCRUD")]
    public interface IRequestStateTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestStateTableCRUD/ReadRequestStateTable", ReplyAction="http://tempuri.org/IRequestStateTableCRUD/ReadRequestStateTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.RequestStateTable[]> ReadRequestStateTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestStateTableCRUD/CreateRequestStateTable", ReplyAction="http://tempuri.org/IRequestStateTableCRUD/CreateRequestStateTableResponse")]
        System.Threading.Tasks.Task CreateRequestStateTableAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestStateTableCRUD/UpdateRequestStateTable", ReplyAction="http://tempuri.org/IRequestStateTableCRUD/UpdateRequestStateTableResponse")]
        System.Threading.Tasks.Task UpdateRequestStateTableAsync(string state, long index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestStateTableCRUD/DeleteRequestStateTable", ReplyAction="http://tempuri.org/IRequestStateTableCRUD/DeleteRequestStateTableResponse")]
        System.Threading.Tasks.Task DeleteRequestStateTableAsync(long index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IRequestStateTableCRUDChannel : ServiceReference1.IRequestStateTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class RequestStateTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IRequestStateTableCRUD>, ServiceReference1.IRequestStateTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RequestStateTableCRUDClient() : 
                base(RequestStateTableCRUDClient.GetDefaultBinding(), RequestStateTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRequestStateTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestStateTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(RequestStateTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), RequestStateTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestStateTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RequestStateTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestStateTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RequestStateTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestStateTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.RequestStateTable[]> ReadRequestStateTableAsync()
        {
            return base.Channel.ReadRequestStateTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateRequestStateTableAsync(string state)
        {
            return base.Channel.CreateRequestStateTableAsync(state);
        }
        
        public System.Threading.Tasks.Task UpdateRequestStateTableAsync(string state, long index)
        {
            return base.Channel.UpdateRequestStateTableAsync(state, index);
        }
        
        public System.Threading.Tasks.Task DeleteRequestStateTableAsync(long index)
        {
            return base.Channel.DeleteRequestStateTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRequestStateTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRequestStateTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RequestStateTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRequestStateTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RequestStateTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRequestStateTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRequestStateTableCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRequestTableCRUD")]
    public interface IRequestTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTableCRUD/ReadRequestTable", ReplyAction="http://tempuri.org/IRequestTableCRUD/ReadRequestTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.RequestTable[]> ReadRequestTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTableCRUD/CreateRequestTable", ReplyAction="http://tempuri.org/IRequestTableCRUD/CreateRequestTableResponse")]
        System.Threading.Tasks.Task CreateRequestTableAsync(
                    long accountBalance, 
                    long idRequestType, 
                    string commentForRequest, 
                    System.Nullable<long> countTV, 
                    string speed, 
                    string ping, 
                    string commentMechanic, 
                    System.Nullable<System.DateTime> dateCreate, 
                    System.Nullable<long> idBrigade, 
                    System.Nullable<long> idManager, 
                    System.Nullable<long> idSystemAdministrator, 
                    string review, 
                    long idRequestState, 
                    string fioClient, 
                    int street, 
                    string house, 
                    string apartment, 
                    string phoneNumber, 
                    string port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTableCRUD/UpdateRequestTable", ReplyAction="http://tempuri.org/IRequestTableCRUD/UpdateRequestTableResponse")]
        System.Threading.Tasks.Task UpdateRequestTableAsync(
                    long accountBalance, 
                    long idRequestType, 
                    string commentForRequest, 
                    System.Nullable<long> countTV, 
                    string speed, 
                    string ping, 
                    string commentMechanic, 
                    System.Nullable<System.DateTime> dateOfCompletion, 
                    System.Nullable<long> idBrigade, 
                    System.Nullable<long> idManager, 
                    System.Nullable<long> idSystemAdministrator, 
                    string review, 
                    long idRequestState, 
                    string fioClient, 
                    int street, 
                    string house, 
                    string apartment, 
                    string phoneNumber, 
                    string port, 
                    int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTableCRUD/DeleteRequestTable", ReplyAction="http://tempuri.org/IRequestTableCRUD/DeleteRequestTableResponse")]
        System.Threading.Tasks.Task DeleteRequestTableAsync(int index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IRequestTableCRUDChannel : ServiceReference1.IRequestTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class RequestTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IRequestTableCRUD>, ServiceReference1.IRequestTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RequestTableCRUDClient() : 
                base(RequestTableCRUDClient.GetDefaultBinding(), RequestTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRequestTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(RequestTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), RequestTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RequestTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RequestTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.RequestTable[]> ReadRequestTableAsync()
        {
            return base.Channel.ReadRequestTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateRequestTableAsync(
                    long accountBalance, 
                    long idRequestType, 
                    string commentForRequest, 
                    System.Nullable<long> countTV, 
                    string speed, 
                    string ping, 
                    string commentMechanic, 
                    System.Nullable<System.DateTime> dateCreate, 
                    System.Nullable<long> idBrigade, 
                    System.Nullable<long> idManager, 
                    System.Nullable<long> idSystemAdministrator, 
                    string review, 
                    long idRequestState, 
                    string fioClient, 
                    int street, 
                    string house, 
                    string apartment, 
                    string phoneNumber, 
                    string port)
        {
            return base.Channel.CreateRequestTableAsync(accountBalance, idRequestType, commentForRequest, countTV, speed, ping, commentMechanic, dateCreate, idBrigade, idManager, idSystemAdministrator, review, idRequestState, fioClient, street, house, apartment, phoneNumber, port);
        }
        
        public System.Threading.Tasks.Task UpdateRequestTableAsync(
                    long accountBalance, 
                    long idRequestType, 
                    string commentForRequest, 
                    System.Nullable<long> countTV, 
                    string speed, 
                    string ping, 
                    string commentMechanic, 
                    System.Nullable<System.DateTime> dateOfCompletion, 
                    System.Nullable<long> idBrigade, 
                    System.Nullable<long> idManager, 
                    System.Nullable<long> idSystemAdministrator, 
                    string review, 
                    long idRequestState, 
                    string fioClient, 
                    int street, 
                    string house, 
                    string apartment, 
                    string phoneNumber, 
                    string port, 
                    int index)
        {
            return base.Channel.UpdateRequestTableAsync(accountBalance, idRequestType, commentForRequest, countTV, speed, ping, commentMechanic, dateOfCompletion, idBrigade, idManager, idSystemAdministrator, review, idRequestState, fioClient, street, house, apartment, phoneNumber, port, index);
        }
        
        public System.Threading.Tasks.Task DeleteRequestTableAsync(int index)
        {
            return base.Channel.DeleteRequestTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRequestTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRequestTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RequestTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRequestTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RequestTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRequestTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRequestTableCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRequestTypeTableCRUD")]
    public interface IRequestTypeTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTypeTableCRUD/ReadRequestTypeTable", ReplyAction="http://tempuri.org/IRequestTypeTableCRUD/ReadRequestTypeTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.RequestTypeTable[]> ReadRequestTypeTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTypeTableCRUD/CreateRequestTypeTable", ReplyAction="http://tempuri.org/IRequestTypeTableCRUD/CreateRequestTypeTableResponse")]
        System.Threading.Tasks.Task CreateRequestTypeTableAsync(string type, decimal price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTypeTableCRUD/UpdateRequestTypeTable", ReplyAction="http://tempuri.org/IRequestTypeTableCRUD/UpdateRequestTypeTableResponse")]
        System.Threading.Tasks.Task UpdateRequestTypeTableAsync(string type, decimal price, long index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRequestTypeTableCRUD/DeleteRequestTypeTable", ReplyAction="http://tempuri.org/IRequestTypeTableCRUD/DeleteRequestTypeTableResponse")]
        System.Threading.Tasks.Task DeleteRequestTypeTableAsync(long index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IRequestTypeTableCRUDChannel : ServiceReference1.IRequestTypeTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class RequestTypeTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IRequestTypeTableCRUD>, ServiceReference1.IRequestTypeTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RequestTypeTableCRUDClient() : 
                base(RequestTypeTableCRUDClient.GetDefaultBinding(), RequestTypeTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRequestTypeTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTypeTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(RequestTypeTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), RequestTypeTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTypeTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RequestTypeTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTypeTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RequestTypeTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RequestTypeTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.RequestTypeTable[]> ReadRequestTypeTableAsync()
        {
            return base.Channel.ReadRequestTypeTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateRequestTypeTableAsync(string type, decimal price)
        {
            return base.Channel.CreateRequestTypeTableAsync(type, price);
        }
        
        public System.Threading.Tasks.Task UpdateRequestTypeTableAsync(string type, decimal price, long index)
        {
            return base.Channel.UpdateRequestTypeTableAsync(type, price, index);
        }
        
        public System.Threading.Tasks.Task DeleteRequestTypeTableAsync(long index)
        {
            return base.Channel.DeleteRequestTypeTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRequestTypeTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRequestTypeTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RequestTypeTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRequestTypeTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RequestTypeTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRequestTypeTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRequestTypeTableCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISystemAdministratorTableCRUD")]
    public interface ISystemAdministratorTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemAdministratorTableCRUD/ReadSystemAdministratorTable", ReplyAction="http://tempuri.org/ISystemAdministratorTableCRUD/ReadSystemAdministratorTableResp" +
            "onse")]
        System.Threading.Tasks.Task<ServiceReference1.SystemAdministratorTable[]> ReadSystemAdministratorTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemAdministratorTableCRUD/CreateSystemAdministratorTable", ReplyAction="http://tempuri.org/ISystemAdministratorTableCRUD/CreateSystemAdministratorTableRe" +
            "sponse")]
        System.Threading.Tasks.Task CreateSystemAdministratorTableAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemAdministratorTableCRUD/UpdateSystemAdministratorTable", ReplyAction="http://tempuri.org/ISystemAdministratorTableCRUD/UpdateSystemAdministratorTableRe" +
            "sponse")]
        System.Threading.Tasks.Task UpdateSystemAdministratorTableAsync(string name, long index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemAdministratorTableCRUD/DeleteSystemAdministratorTable", ReplyAction="http://tempuri.org/ISystemAdministratorTableCRUD/DeleteSystemAdministratorTableRe" +
            "sponse")]
        System.Threading.Tasks.Task DeleteSystemAdministratorTableAsync(long index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ISystemAdministratorTableCRUDChannel : ServiceReference1.ISystemAdministratorTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SystemAdministratorTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.ISystemAdministratorTableCRUD>, ServiceReference1.ISystemAdministratorTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SystemAdministratorTableCRUDClient() : 
                base(SystemAdministratorTableCRUDClient.GetDefaultBinding(), SystemAdministratorTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISystemAdministratorTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SystemAdministratorTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(SystemAdministratorTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), SystemAdministratorTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SystemAdministratorTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SystemAdministratorTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SystemAdministratorTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SystemAdministratorTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SystemAdministratorTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.SystemAdministratorTable[]> ReadSystemAdministratorTableAsync()
        {
            return base.Channel.ReadSystemAdministratorTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateSystemAdministratorTableAsync(string name)
        {
            return base.Channel.CreateSystemAdministratorTableAsync(name);
        }
        
        public System.Threading.Tasks.Task UpdateSystemAdministratorTableAsync(string name, long index)
        {
            return base.Channel.UpdateSystemAdministratorTableAsync(name, index);
        }
        
        public System.Threading.Tasks.Task DeleteSystemAdministratorTableAsync(long index)
        {
            return base.Channel.DeleteSystemAdministratorTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISystemAdministratorTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISystemAdministratorTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SystemAdministratorTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISystemAdministratorTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SystemAdministratorTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISystemAdministratorTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISystemAdministratorTableCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IWorkerTableCRUD")]
    public interface IWorkerTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkerTableCRUD/ReadWorkerTable", ReplyAction="http://tempuri.org/IWorkerTableCRUD/ReadWorkerTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Worker[]> ReadWorkerTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkerTableCRUD/CreateWorkerTable", ReplyAction="http://tempuri.org/IWorkerTableCRUD/CreateWorkerTableResponse")]
        System.Threading.Tasks.Task CreateWorkerTableAsync(string name, float percent, long idBrigade);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkerTableCRUD/UpdateWorkerTable", ReplyAction="http://tempuri.org/IWorkerTableCRUD/UpdateWorkerTableResponse")]
        System.Threading.Tasks.Task UpdateWorkerTableAsync(string name, float percent, long idBrigade, long index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkerTableCRUD/DeleteWorkerTable", ReplyAction="http://tempuri.org/IWorkerTableCRUD/DeleteWorkerTableResponse")]
        System.Threading.Tasks.Task DeleteWorkerTableAsync(long index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IWorkerTableCRUDChannel : ServiceReference1.IWorkerTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class WorkerTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IWorkerTableCRUD>, ServiceReference1.IWorkerTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WorkerTableCRUDClient() : 
                base(WorkerTableCRUDClient.GetDefaultBinding(), WorkerTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IWorkerTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WorkerTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(WorkerTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), WorkerTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WorkerTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WorkerTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WorkerTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WorkerTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WorkerTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Worker[]> ReadWorkerTableAsync()
        {
            return base.Channel.ReadWorkerTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateWorkerTableAsync(string name, float percent, long idBrigade)
        {
            return base.Channel.CreateWorkerTableAsync(name, percent, idBrigade);
        }
        
        public System.Threading.Tasks.Task UpdateWorkerTableAsync(string name, float percent, long idBrigade, long index)
        {
            return base.Channel.UpdateWorkerTableAsync(name, percent, idBrigade, index);
        }
        
        public System.Threading.Tasks.Task DeleteWorkerTableAsync(long index)
        {
            return base.Channel.DeleteWorkerTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWorkerTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IWorkerTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WorkerTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IWorkerTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WorkerTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IWorkerTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IWorkerTableCRUD,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISelect")]
    public interface ISelect
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISelect/GetCountRequestByMonths", ReplyAction="http://tempuri.org/ISelect/GetCountRequestByMonthsResponse")]
        System.Threading.Tasks.Task<int> GetCountRequestByMonthsAsync(int year, int month, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISelect/GetTotalCount", ReplyAction="http://tempuri.org/ISelect/GetTotalCountResponse")]
        System.Threading.Tasks.Task<int> GetTotalCountAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISelect/GetCountRequestByDay", ReplyAction="http://tempuri.org/ISelect/GetCountRequestByDayResponse")]
        System.Threading.Tasks.Task<ServiceReference1.CountByDay[]> GetCountRequestByDayAsync(int year, int month, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISelect/GetRequestsBySomeDay", ReplyAction="http://tempuri.org/ISelect/GetRequestsBySomeDayResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Request[]> GetRequestsBySomeDayAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISelect/GetWorkerReport", ReplyAction="http://tempuri.org/ISelect/GetWorkerReportResponse")]
        System.Threading.Tasks.Task<ServiceReference1.WorkerReport[]> GetWorkerReportAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISelect/GetManagerReport", ReplyAction="http://tempuri.org/ISelect/GetManagerReportResponse")]
        System.Threading.Tasks.Task<ServiceReference1.ManagerReport[]> GetManagerReportAsync(System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ISelectChannel : ServiceReference1.ISelect, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SelectClient : System.ServiceModel.ClientBase<ServiceReference1.ISelect>, ServiceReference1.ISelect
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SelectClient() : 
                base(SelectClient.GetDefaultBinding(), SelectClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISelect.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SelectClient(EndpointConfiguration endpointConfiguration) : 
                base(SelectClient.GetBindingForEndpoint(endpointConfiguration), SelectClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SelectClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SelectClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SelectClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SelectClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SelectClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> GetCountRequestByMonthsAsync(int year, int month, int index)
        {
            return base.Channel.GetCountRequestByMonthsAsync(year, month, index);
        }
        
        public System.Threading.Tasks.Task<int> GetTotalCountAsync(int index)
        {
            return base.Channel.GetTotalCountAsync(index);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CountByDay[]> GetCountRequestByDayAsync(int year, int month, int index)
        {
            return base.Channel.GetCountRequestByDayAsync(year, month, index);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Request[]> GetRequestsBySomeDayAsync(System.DateTime date)
        {
            return base.Channel.GetRequestsBySomeDayAsync(date);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.WorkerReport[]> GetWorkerReportAsync(System.DateTime date)
        {
            return base.Channel.GetWorkerReportAsync(date);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ManagerReport[]> GetManagerReportAsync(System.DateTime date)
        {
            return base.Channel.GetManagerReportAsync(date);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISelect))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISelect))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SelectClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISelect);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SelectClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISelect);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISelect,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IStreetTableCRUD")]
    public interface IStreetTableCRUD
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreetTableCRUD/ReadStreetTable", ReplyAction="http://tempuri.org/IStreetTableCRUD/ReadStreetTableResponse")]
        System.Threading.Tasks.Task<ServiceReference1.StreetTable[]> ReadStreetTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreetTableCRUD/CreateStreetTable", ReplyAction="http://tempuri.org/IStreetTableCRUD/CreateStreetTableResponse")]
        System.Threading.Tasks.Task CreateStreetTableAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreetTableCRUD/UpdateStreetTable", ReplyAction="http://tempuri.org/IStreetTableCRUD/UpdateStreetTableResponse")]
        System.Threading.Tasks.Task UpdateStreetTableAsync(string name, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStreetTableCRUD/DeleteStreetTable", ReplyAction="http://tempuri.org/IStreetTableCRUD/DeleteStreetTableResponse")]
        System.Threading.Tasks.Task DeleteStreetTableAsync(int index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IStreetTableCRUDChannel : ServiceReference1.IStreetTableCRUD, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class StreetTableCRUDClient : System.ServiceModel.ClientBase<ServiceReference1.IStreetTableCRUD>, ServiceReference1.IStreetTableCRUD
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public StreetTableCRUDClient() : 
                base(StreetTableCRUDClient.GetDefaultBinding(), StreetTableCRUDClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IStreetTableCRUD.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreetTableCRUDClient(EndpointConfiguration endpointConfiguration) : 
                base(StreetTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), StreetTableCRUDClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreetTableCRUDClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(StreetTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreetTableCRUDClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(StreetTableCRUDClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public StreetTableCRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.StreetTable[]> ReadStreetTableAsync()
        {
            return base.Channel.ReadStreetTableAsync();
        }
        
        public System.Threading.Tasks.Task CreateStreetTableAsync(string name)
        {
            return base.Channel.CreateStreetTableAsync(name);
        }
        
        public System.Threading.Tasks.Task UpdateStreetTableAsync(string name, int index)
        {
            return base.Channel.UpdateStreetTableAsync(name, index);
        }
        
        public System.Threading.Tasks.Task DeleteStreetTableAsync(int index)
        {
            return base.Channel.DeleteStreetTableAsync(index);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStreetTableCRUD))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IStreetTableCRUD))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/WcfServiceLibraryRequest/CRUD/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return StreetTableCRUDClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IStreetTableCRUD);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return StreetTableCRUDClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IStreetTableCRUD);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IStreetTableCRUD,
        }
    }
}
